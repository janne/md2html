#!/usr/bin/env ruby

require 'optparse'
require 'rubygems'
require 'active_support'
require 'rdiscount'
require 'digest/md5'

def gfm(text)
  # Extract pre blocks
  extractions = {}
  text.gsub!(%r{<pre>.*?</pre>}m) do |match|
    md5 = Digest::MD5.hexdigest(match)
    extractions[md5] = match
    "{gfm-extraction-#{md5}}"
  end

  # prevent foo_bar_baz from ending up with an italic word in the middle
  text.gsub!(/(^(?! {4}|\t)\w+_\w+_\w[\w_]*)/) do |x|
    x.gsub('_', '\_') if x.split('').sort.to_s[0..1] == '__'
  end

  # in very clear cases, let newlines become <br /> tags
  text.gsub!(/^[\w\<][^\n]*\n+/) do |x|
    x =~ /\n{2}/ ? x : (x.strip!; x << "  \n")
  end

  # Insert pre block extractions
  text.gsub!(/\{gfm-extraction-([0-9a-f]{32})\}/) do
    "\n\n" + extractions[$1]
  end

  text
end

def template(title, content)
  "
  <html>
    <head>
      <meta http-equiv='Content-type' content='text/html; charset=utf-8' />
      <title>#{title}</title>
      <style>
        body {
          font-family: Verdana, Helvetica, Arial;
          font-size: 14px;
        }
        table {
          width: 100%;
        }
        th {
          text-align: left; 
        }
        div#container {
          width: 700px;
          margin: 0 auto;
          background-color:#f8f8f8;
          padding: 20px;
        }
        a {
          color: #1B97F2;
          text-decoration: none;
        }
        a:hover {
          text-decoration: underline;
        }
        a img {
          border: none;
        }
        code {
          font-family:'Bitstream Vera Sans Mono','Courier',monospace;
          font-size:85%;
          color: #444;
        }
        pre {
          border: solid 1px #ccc;
          background-color: #fff;
          padding: 10px;
          overflow: auto; 
          overflow-y: visible
        }
        h1 {
          font-size: 24px;
        }
        h2, h2 a {
          color: #E98C08;
          font-size: 18px;
        }

        h3 {
          color: #666;
          font-size: 14px;
        }

        h4 {
          font-size: 12px;
          margin-bottom: 5px;
        }
        ul {
          margin: 4px 0;
          padding-left: 17px;
        }
      </style>
    </head>
    <body>
      <div id='container'>
        #{content}
      </div>
    </body>
  </html>
  "
end

options = {}
optparse = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename __FILE__} [options] file1 file2 ..."
  options[:open] = false
  opts.on('-o', '--open', 'Open after conversion') do
    options[:open] = true
  end
  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
end

optparse.parse!

if ARGV.length > 0
  ARGV.each do |filename|
    basename = File.basename(filename)
    markdown = RDiscount.new(gfm(IO.read(filename)))
    File.open("#{filename}.html", 'w') {|f| f.write template(basename, markdown.to_html)}
    system("open #{filename.gsub(' ', '\ ')}.html") if options[:open]
  end
else
  puts optparse
end
